{"version":3,"sources":["free-cell.js"],"names":["vm","Vue","el","data","gameTime","timer","isPlaying","showModal","panelCode","options","fail","deckHolder","currentPanel","deckDone","deckUnorder","ignoreCardId","ondragCardId","ondragDeckName","ondragDeckIndex","ondropDeckName","returnSteps","displayTime","computed","minute","Math","floor","this","toString","padStart","methods","shuffle","arr","i","length","j","_ref","cardArr","Array","from","map","index","shuffleCards","generateRandomCards","forEach","cardId","splice","indexOf","findCardPattern","push","displayCardParttern","deckIndex","cardNumber","ondragStart","deckName","cardPattern","ondropDeckIndex","ondragEnter","e","preventDefault","ondragEnd","pop","lastDoneDeckCardId","doneDeck","dropUnorderDeck","lastUnorderDeckCardId","dragUnorderDeck","dragCardColorIndex","ceil","unorderDeckCardColorIndex","numberCompare","switchPanel","startGame","pauseGame","countTime","continueGame","resetAllData","setTimeout","restartGame","clearInterval","returnGameSteps","lastStep","_this2","setInterval","config","aniCardEnter","delay","dataset","animationDelay","classList","addEventListener","remove","removeEventListener","handleAnimationEnd","created"],"mappings":"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","file":"free-cell.js","sourcesContent":["/**\n * 牌號規則\n * 愛心 - 1~13\n * 梅花 - 14~26\n * 黑桃 - 27~39\n * 方塊 - 40~52\n*/\nconst vm = new Vue({\n  el: '#app',\n  data: {\n    gameTime: 1000*60*1,\n    timer: null,\n    isPlaying: false,\n    showModal: true,\n    panelCode: {\n      options: 1,\n      success: 2,\n      fail: 3,\n    },\n    currentPanel: 0,\n    deckHolder: [0, 0, 0, 0],\n    deckDone: [[1], [14], [27], [40]],\n    deckUnorder: [[], [], [], [], [], [], [], []],\n    ignoreCardId: [1, 14, 27, 40],\n    ondragCardId: null,\n    ondragDeckName: null,\n    ondragDeckIndex: null,\n    ondropDeckName: null,\n    ondropDeckIndex: null,\n    returnSteps: [],\n  },\n  computed: {\n    displayTime() {\n      const minute = Math.floor(this.gameTime/1000/60).toString().padStart(2,0);\n      const second = Math.floor((this.gameTime - minute*60*1000)/1000).toString().padStart(2,0);\n      return `${minute}:${second}`;\n    },\n  },\n  methods: {\n    shuffle(arr) {\n      for(let i = arr.length - 1; i >= 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n      }\n      return arr;\n    },\n    generateRandomCards() {\n      const cardArr = Array.from(new Array(52))\n        .map((card, index) => index + 1);\n      const shuffleCards = this.shuffle(cardArr);\n      this.ignoreCardId.forEach((cardId, i) => {\n        if (shuffleCards.indexOf(cardId) !== -1) {\n          shuffleCards.splice(shuffleCards.indexOf(cardId), 1);\n        }\n      });\n      for(let i = 0; i < this.deckUnorder.length; i++) {\n        for(let j = 0; j < 6; j++) {\n          this.deckUnorder[i].push(shuffleCards.shift());\n        }\n      }\n    },\n    findCardPattern(cardId) {\n      const index = Math.ceil(cardId / 13);\n      switch (index) {\n        case 1:\n          return 'heart';\n        case 2:\n          return 'club';\n        case 3:\n          return 'spade';\n        case 4:\n          return 'diamond';\n        default:\n          return;\n      }\n    },\n    displayCardParttern(cardId, deckIndex) {\n      let cardNumber = cardId % 13;\n      if (cardNumber === 0) cardNumber = 13;\n      const cardPattern = this.findCardPattern(cardId);\n      return `./img/2nd-week2/${cardPattern}-${cardNumber}.png`;\n    },\n    ondragStart(cardId, deckIndex, deckName) {\n      // 清空上一回的 drop 內容\n      this.ondropDeckName = null;\n      this.ondropDeckIndex = null;\n      this.ondragCardId = cardId;\n      this.ondragDeckIndex = deckIndex;\n      this.ondragDeckName = deckName;\n      // console.log('ondragStart');\n    },\n    ondragEnter(e, deckIndex, deckName) {\n      e.preventDefault();\n      this.ondropDeckName = deckName;\n      this.ondropDeckIndex = deckIndex;\n      // console.log(this.ondropDeckName, this.ondropDeckIndex);\n      // console.log('ondragEnter');\n    },\n    ondragEnd(e, cardId, deckIndex) {\n      e.preventDefault();\n      // 狀況一: unorder 移動到 holder\n      if (this.ondropDeckName === 'deckHolder') {\n        if (this.deckHolder[this.ondropDeckIndex] !== 0) return;\n        this.deckHolder.splice(this.ondropDeckIndex, 1, this.ondragCardId);\n        this.deckUnorder[this.ondragDeckIndex].pop();\n      }\n      // 狀況二: unorder 或 holder 移動到 done\n      else if (this.ondropDeckName === 'deckDone') {\n        const doneDeck = this.deckDone[this.ondropDeckIndex];\n        const lastDoneDeckCardId = doneDeck[doneDeck.length - 1];\n        if (this.ondragCardId !== lastDoneDeckCardId + 1) return;\n        doneDeck.push(this.ondragCardId);\n        if (this.ondragDeckName === 'deckHolder') {\n          this[this.ondragDeckName].pop();\n        } else {\n          this[this.ondragDeckName][this.ondragDeckIndex].pop();\n        }\n      }\n      // 狀況三: unorder 移動到 unorder\n      else if (this.ondropDeckName === 'deckUnorder') {\n        const dropUnorderDeck = this.deckUnorder[this.ondropDeckIndex];\n        const lastUnorderDeckCardId = dropUnorderDeck[dropUnorderDeck.length - 1];\n        const dragUnorderDeck = this.deckUnorder[this.ondragDeckIndex];\n        // 比對大小及顏色\n        const dragCardColorIndex = Math.ceil(this.ondragCardId / 13);\n        const unorderDeckCardColorIndex = Math.ceil(lastUnorderDeckCardId / 13);\n        const numberCompare = (this.ondragCardId % 13) === (lastUnorderDeckCardId % 13) - 1 || (this.ondragCardId % 13) === (lastUnorderDeckCardId % 13) + 12;\n        if ( (dragCardColorIndex + unorderDeckCardColorIndex !== 5)\n          && dragCardColorIndex !== unorderDeckCardColorIndex\n          && numberCompare ) {\n          dropUnorderDeck.push(this.ondragCardId);\n          dragUnorderDeck.pop();\n        }\n      }\n      this.returnSteps.push({\n        ondragCardId: this.ondragCardId,\n        ondragDeckName: this.ondragDeckName,\n        ondragDeckIndex: this.ondragDeckIndex,\n        ondropDeckName: this.ondropDeckName,\n        ondropDeckIndex: this.ondropDeckIndex,\n      });\n    },\n    startGame() {\n      this.switchPanel({\n        isPlaying: true,\n        showModal: false,\n      });\n      this.countTime();\n    },\n    pauseGame() {\n      this.switchPanel({\n        isPlaying: false,\n        showModal: true,\n        currentPanel: this.panelCode.options,\n      });\n    },\n    continueGame() {\n      this.switchPanel({\n        isPlaying: true,\n        showModal: false,\n      });\n    },\n    restartGame() {\n      this.resetAllData();\n      setTimeout(() => {\n        this.generateRandomCards();\n      }, 400);\n      this.countTime();\n      this.showModal = false;\n      this.isPlaying = true;\n    },\n    resetAllData() {\n      this.gameTime = 1000*60*30;\n      this.deckHolder = [0, 0, 0, 0];\n      this.deckDone = [[1], [14], [27], [40]];\n      this.deckUnorder = [[], [], [], [], [], [], [], []];\n      this.ondragCardId = null;\n      this.ondragDeckIndex = null;\n      this.ondropDeckName = null;\n      this.ondropDeckIndex = null;\n      this.returnSteps = [];\n      clearInterval(this.timer);\n      this.timer = null;\n    },\n    returnGameSteps() {\n      if (this.returnSteps.length === 0) {\n        alert('No more step return.');\n      } else {\n        const lastStep = this.returnSteps.pop();\n        if (lastStep.ondragDeckName === 'deckHolder') {\n          this[lastStep.ondragDeckName].splice(lastStep.ondragDeckIndex, 1, lastStep[ondragCardId]);\n        } else {\n          this[lastStep.ondragDeckName][lastStep.ondragDeckIndex].push(lastStep.ondragCardId);\n        }\n        if (lastStep.ondropDeckName === 'deckHolder') {\n          this[lastStep.ondropDeckName].splice(lastStep.ondropDeckIndex, 1, 0);\n        } else {\n          this[lastStep.ondropDeckName][lastStep.ondropDeckIndex].pop();\n        }\n      }\n    },\n    countTime() {\n      this.timer = setInterval(() => {\n        if (this.gameTime <= 0) {\n          this.switchPanel({\n            isPlaying: false,\n            showModal: true,\n            currentPanel: this.panelCode.fail\n          });\n          clearInterval(this.timer);\n          return;\n        }\n        if (this.isPlaying) {\n          this.gameTime -= 1000;\n        }\n      }, 1000);\n    },\n    switchPanel(config) {\n      this.currentPanel = config.currentPanel || 0;\n      this.isPlaying = config.isPlaying;\n      this.showModal = config.showModal;\n    },\n    aniCardEnter(el) {\n      const delay = el.dataset.index * 100;\n      el.style.animationDelay = `${delay/1000}s`;\n      el.classList.add('animated', 'fadeInUp');\n      function handleAnimationEnd() {\n        el.classList.remove('animated', 'fadeInUp');\n        el.removeEventListener('animationend', handleAnimationEnd);\n      }\n      el.addEventListener('animationend', handleAnimationEnd);\n    },\n  },\n  created() {\n    // 產生隨機 unorder 牌組\n    this.generateRandomCards();\n  }\n});"]}
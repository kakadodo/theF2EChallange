{"version":3,"sources":["pomodoro.js"],"names":["$","playMode","work","name","color","break","Vue","el","data","vm","mode","isPlaying","time","dueTime","totalTime","timer","todoInput","todoLists","id","title","finished","pomodoroCount","playingPieChart","playingPieConfig","displayPieChart","ringTone","isModalShow","currentDetailModal","computed","playingList","queueLists","this","filter","list","slice","undoLists","doneLists","modeBgClass","modeDisplayPieClass","pie_work","pie_playing","modePlayBtnClass","playing","displayDueTime","minute","Math","floor","toString","padStart","methods","addTodo","str","trim","push","now","switchPlayingTodo","findIndex","todo","splice","index","unshift","createPlayingPie","playingPie","Chart","createDisplayPie","type","displayPie","borderColor","createChartBar","_this","chartBar","chartBarConfig","datasets","label","labels","backgroundColor","yAxes","gridLines","options","legend","ticks","scales","fontColor","map","i","length","chartBarChart","destroy","switchCountdown","pause","tempCount","setInterval","_this2","play","clearCountdown","update","clearInterval","switchMode","showModal","num","backToPlaying","watch","val","_this3","setTimeout"],"mappings":"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","file":"pomodoro.js","sourcesContent":["$(function () {\n  const playMode = {\n    work: {\n      name: 'work',\n      time: 25,\n      color: '#FF4384',\n    },\n    break: {\n      name: 'break',\n      time: 5,\n      color: '#00A7FF',\n    },\n  };\n  const vm = new Vue({\n    el: '#app',\n    data: {\n      mode: playMode.work.name,\n      isPlaying: false,\n      dueTime: playMode.work.time*60*1000,\n      totalTime: playMode.work.time,\n      timer: null,\n      todoInput: '',\n      todoLists: [\n        {\n          id: 1,\n          title: '完成第一關番茄鐘',\n          finished: false,\n          pomodoroCount: 2,\n        },\n        {\n          id: 2,\n          title: '日用品採買',\n          finished: false,\n          pomodoroCount: 0,\n        },\n        {\n          id: 3,\n          title: '整理房間',\n          finished: false,\n          pomodoroCount: 0,\n        },\n        {\n          id: 4,\n          title: '修理椅子',\n          finished: true,\n          pomodoroCount: 4,\n        },\n        {\n          id: 5,\n          title: '洗衣服',\n          finished: true,\n          pomodoroCount: 3,\n        },\n        {\n          id: 6,\n          title: '曬衣服',\n          finished: false,\n          pomodoroCount: 0,\n        },\n      ],\n      playingPieChart: null,\n      playingPieConfig: {},\n      displayPieChart: null,\n      isModalShow: false,\n      currentDetailModal: 1,\n      ringTone: {\n        work: 'clown_horn',\n        break: 'pastoral',\n      }\n    },\n    computed: {\n      playingList() {\n        return this.todoLists.filter(list => !list.finished)[0];\n      },\n      queueLists() {\n        return this.todoLists.filter(list => !list.finished).slice(1,4);\n      },\n      undoLists() {\n        return this.todoLists.filter(list => !list.finished);\n      },\n      doneLists() {\n        return this.todoLists.filter(list => list.finished);\n      },\n      modeBgClass() {\n        switch(this.mode) {\n          case 'work':\n            return 'bg_work';\n          case 'break':\n            return 'bg_break';\n          default:\n            break;\n        }\n      },\n      modeDisplayPieClass() {\n        return {\n          'pie_work': this.mode === playMode.work.name,\n          'pie_break': this.mode === playMode.break.name,\n          'pie_playing': this.isPlaying,\n        };\n      },\n      modePlayBtnClass() {\n        return {\n          'work': this.mode === playMode.work.name,\n          'break': this.mode === playMode.break.name,\n          'playing': this.isPlaying,\n        }\n      },\n      displayDueTime() {\n        const minute = Math.floor(this.dueTime/1000/60).toString().padStart(2,0);\n        const second = Math.floor((this.dueTime - minute*60*1000)/1000).toString().padStart(2,0);\n        return `${minute}:${second}`;\n      },\n    },\n    methods: {\n      addTodo() {\n        const str = this.todoInput.trim();\n        if (!str) return;\n        this.todoLists.push({\n          id: Date.now(),\n          title: str,\n          finished: false,\n          pomodoroCount: 0,\n        });\n        this.todoInput = '';\n      },\n      switchPlayingTodo(list) {\n        const index = this.todoLists.findIndex(todo => todo.id === list.id);\n        this.todoLists.splice(index, 1);\n        this.todoLists.unshift(list);\n      },\n      createPlayingPie() {\n        const playingPie = $('.js_playing_pie');\n        this.playingPieChart = new Chart(playingPie, this.playingPieConfig);\n      },\n      createDisplayPie() {\n        const displayPie = $('.js_display_pie');\n        this.playingPieConfig = {\n          type: 'pie',\n          data: {\n            datasets: [{\n              data: [0, this.totalTime],\n              borderColor: playMode[this.mode]['color'],\n              backgroundColor: [playMode[this.mode]['color'], 'transparent'],\n            }],\n          },\n        };\n        this.displayPieChart = new Chart(displayPie, this.playingPieConfig);\n      },\n      createChartBar() {\n        const chartBar = $('.js_chart_bar');\n        this.chartBarConfig = {\n          type: 'bar',\n          data: {\n            labels: ['7/1', '7/2', '7/3', '7/4', '7/5', '7/6', '7/7'],\n            datasets: [{\n              label: 'FOCUS TIME',\n              data: [5, 10, 10, 6, 7, 9, 13],\n              backgroundColor: [],\n            }],\n          },\n          options: {\n            legend: {\n              display: false,\n            },\n            scales: {\n              yAxes: [{\n                gridLines: {\n                  display: false,\n                  color: '#fff',\n                },\n                ticks: {\n                  fontColor: '#fff',\n                  min: 0,\n                },\n              }],\n              xAxes: [{\n                gridLines: {\n                  display: false,\n                  color: '#fff',\n                },\n                ticks: {\n                  fontColor: '#fff',\n                },\n              }]\n            },\n          }\n        };\n        const backgroundColor = this.chartBarConfig.data.labels.map((label, i) => {\n          return i == this.chartBarConfig.data.labels.length-1 ? playMode.work.color : '#fff';\n        });\n        this.chartBarConfig.data.datasets[0].backgroundColor = backgroundColor;\n        if (this.chartBarChart) {\n          this.chartBarChart.destroy();\n          this.chartBarChart = null;\n        }\n        this.chartBarChart = new Chart(chartBar, this.chartBarConfig);\n      },\n      switchCountdown() {\n        // 第一次執行\n        if (!this.isPlaying && !this.timer) {\n          // 不管怎樣都先歸零鈴聲\n          $(`#js_ring_${this.ringTone[this.mode]}`)[0].pause();\n          $(`#js_ring_${this.ringTone[this.mode]}`)[0].currentTime=0;\n          if (this.mode === playMode.work.name) this.createPlayingPie();\n          this.isPlaying = true;\n          var tempCount = 0;\n          this.timer = setInterval(() => {\n            if (this.dueTime <= 0) {\n              // 播放音效\n              if (this.ringTone[this.mode] !== 'none') {\n                $(`#js_ring_${this.ringTone[this.mode]}`)[0].play();\n              }\n              this.clearCountdown();\n              if (this.mode === playMode.work.name) {\n                this.todoLists[0]['pomodoroCount']++;\n              }\n            }\n            if (this.isPlaying) {\n              this.dueTime -= 1000;\n              tempCount += 1;\n              const data = this.playingPieConfig.data.datasets[0].data;\n              if (Math.floor(tempCount/60) !== data[0]) {\n                data[0] = Math.floor(tempCount/60);\n                data[1] = this.totalTime - data[0];\n                if (this.mode === playMode.work.name) this.playingPieChart.update();\n                this.displayPieChart.update();\n              }\n            }\n          }, 1000);\n        } else if (this.isPlaying && this.timer) {\n          // 暫停倒數\n          this.isPlaying = false;\n        } else {\n          // 恢復倒數\n          this.isPlaying = true;\n        }\n      },\n      clearCountdown() {\n        clearInterval(this.timer);\n        this.timer = null;\n        this.isPlaying = false;\n        switch(this.mode) {\n          case 'work':\n            this.dueTime = playMode.work.time*60*1000;\n            this.totalTime = playMode.work.time;\n            break;\n          case 'break':\n            this.dueTime = playMode.break.time*60*1000;\n            this.totalTime = playMode.break.time;\n            break;\n          default:\n            break;\n        }\n        if (this.playingPieChart) {\n          this.playingPieChart.destroy();\n          this.playingPieChart = null;\n        }\n        if (this.displayPieChart) {\n          this.displayPieChart.destroy();\n          this.displayPieChart = null;\n        }\n        this.createDisplayPie();\n      },\n      switchMode() {\n        switch(this.mode) {\n          case 'work':\n            this.mode = playMode['break']['name'];\n            break;\n          case 'break':\n            this.mode = playMode['work']['name'];\n            break;\n          default:\n            break;\n        }\n        this.clearCountdown();\n      },\n      showModal(num) {\n        this.currentDetailModal = num;\n        this.isModalShow = true;\n      },\n      backToPlaying() {\n        this.isModalShow = false;\n        if (this.mode !== playMode.work.name) {\n          this.switchMode();\n        }\n      }\n    },\n    watch: {\n      currentDetailModal(val) {\n        if (val == 2) {\n          setTimeout(() => {\n            this.createChartBar();\n          }, 1500);\n        }\n      },\n    },\n    mounted() {\n      this.createDisplayPie();\n    },\n  });\n});"]}